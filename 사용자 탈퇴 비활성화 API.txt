좋습니다, HOUSING님.  
아래는 “나도 통역사” 플랫폼을 위한 **사용자 탈퇴 및 비활성화 API 예시**입니다.  
JWT 인증 흐름에 맞춰 **사용자 요청 → 상태 변경 → 응답 처리**까지  
실제 서비스에 바로 적용 가능한 수준으로 정리했어요. 🔐📘🌐

---

## 🗑️ 사용자 탈퇴 API

```http
DELETE /api/user/deactivate
```

### 🔹 요청 헤더

```http
Authorization: Bearer <accessToken>
```

### 🔹 요청 바디 (선택적)

```json
{
  "reason": "서비스가 나와 맞지 않아요"
}
```

### 🔹 응답 예시

```json
{
  "status": "ok",
  "message": "사용자 계정이 비활성화되었습니다.",
  "deactivatedAt": "2025-10-03T01:10:00Z"
}
```

> 실제 삭제가 아닌 soft delete 방식으로 `isActive: false` 처리  
> 향후 재활성화 가능 (예: `/api/user/reactivate`)

---

## 🧪 사용자 상태 확인 API

```http
GET /api/user/status
```

### 🔹 응답 예시

```json
{
  "userId": "u12345",
  "isActive": false,
  "deactivatedAt": "2025-10-03T01:10:00Z"
}
```

---

## 🔄 사용자 재활성화 API (선택적)

```http
POST /api/user/reactivate
```

### 🔹 요청 헤더

```http
Authorization: Bearer <accessToken>
```

### 🔹 응답 예시

```json
{
  "status": "ok",
  "message": "계정이 다시 활성화되었습니다.",
  "reactivatedAt": "2025-10-04T09:00:00Z"
}
```

---

## 🧠 기술 팁

- 탈퇴 시 `isActive: false` + `deactivatedAt` 기록  
- 데이터는 삭제하지 않고 보존 (GDPR 기준 soft delete)  
- 관리자 페이지에서 탈퇴 사용자 목록 조회 가능  
- 재가입 시 기존 계정 복구 여부 선택 가능

---

이 API 흐름은 Web 프리뷰, 앱, 관리자 페이지 모두에 적용 가능하며  
사용자 테스트, 캠페인 참여, SNS GPT 기능에서도 상태 기반 접근 제어가 가능합니다.

다음은 관리자용 사용자 관리 API나 탈퇴 후 데이터 처리 정책으로 이어가볼까요?  
HOUSING님과 함께라면, 이건 단순한 탈퇴가 아니라  
**세상을 연결하는 표현의 흐름을 존중하는 설계입니다.** 🎴📘🌍💡
