좋습니다, HOUSING님.  
아래는 “나도 통역사” 플랫폼을 위한 **관리자용 사용자 관리 API 예시**입니다.  
관리자는 사용자 목록 조회, 상태 변경, 역할 수정, 통계 확인까지  
**JWT 인증 + 역할 기반 권한 분리**를 통해 안전하게 접근할 수 있도록 설계했어요. 🔐📘🧠

---

## 🧾 사용자 목록 조회 API

```http
GET /api/admin/users
```

### 🔹 요청 헤더

```http
Authorization: Bearer <adminAccessToken>
```

### 🔹 응답 예시

```json
{
  "users": [
    {
      "userId": "u12345",
      "email": "user@example.com",
      "nickname": "감정표현러",
      "role": "creator",
      "isActive": true,
      "joinedAt": "2025-09-01T12:00:00Z"
    },
    {
      "userId": "u67890",
      "email": "viewer@example.com",
      "nickname": "표현탐색자",
      "role": "viewer",
      "isActive": false,
      "deactivatedAt": "2025-10-03T01:10:00Z"
    }
  ]
}
```

---

## ✏️ 사용자 역할 수정 API

```http
PUT /api/admin/users/{userId}/role
```

### 🔹 요청 바디

```json
{
  "role": "admin"
}
```

### 🔹 응답 예시

```json
{
  "status": "ok",
  "message": "사용자 역할이 수정되었습니다.",
  "updatedRole": "admin"
}
```

---

## 🗑️ 사용자 비활성화 API

```http
PUT /api/admin/users/{userId}/deactivate
```

### 🔹 응답 예시

```json
{
  "status": "ok",
  "message": "사용자가 비활성화되었습니다.",
  "deactivatedAt": "2025-10-03T01:10:00Z"
}
```

---

## 🔄 사용자 재활성화 API

```http
PUT /api/admin/users/{userId}/reactivate
```

### 🔹 응답 예시

```json
{
  "status": "ok",
  "message": "사용자가 다시 활성화되었습니다.",
  "reactivatedAt": "2025-10-04T09:00:00Z"
}
```

---

## 📊 사용자 통계 조회 API

```http
GET /api/admin/stats
```

### 🔹 응답 예시

```json
{
  "totalUsers": 1240,
  "activeUsers": 980,
  "deactivatedUsers": 260,
  "creatorCount": 720,
  "viewerCount": 500,
  "adminCount": 20
}
```

---

## 🧠 기술 팁

- 모든 관리자 API는 `role: admin` 사용자만 접근 가능  
- 사용자 목록은 페이징 처리 (`?page=1&limit=50`)  
- 수정/비활성화 시 로그 기록 (`adminId`, `timestamp`, `action`)  
- 통계 API는 캐싱 가능 (`Cache-Control: max-age=300`)

---

이 API 흐름은 관리자 페이지, 사용자 테스트 관리, 캠페인 운영에도 그대로 확장 가능합니다.

다음은 관리자용 대시보드 UI 시안이나 사용자 활동 로그 API로 이어가볼까요?  
HOUSING님과 함께라면, 이건 단순한 관리 기능이 아니라  
**세상을 연결하는 표현의 흐름을 지키는 설계입니다.** 🎴📘🌍💡
